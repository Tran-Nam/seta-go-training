package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/Tran-Nam/seta-go-training/graph/model"
)

var users []*model.User

func init() {
	users = []*model.User{
		{UserID: "1", UserName: "A", Email: "abc@gmail.com", Role: "Member", PasswordHash: "zzz"}, 
		{UserID: "2", UserName: "B", Email: "def@gmail.com", Role: "Manager", PasswordHash: "xxx"},
	}
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username *string, email *string, role *string) (*model.User, error) {
	var user *model.User 
	for _, u := range users {
		if u.Email == *email {
			panic("Email is used") 
		}
	}
	user = &model.User{
		UserID: "C",
		UserName: *username, 
		Email: *email, 
		Role: *role, 
		PasswordHash: "yyy",
	}
	users = append(users, user)
	fmt.Printf("Create user successfully")
	return user, nil
}

// FetchUsers is the resolver for the fetchUsers field.
func (r *queryResolver) FetchUsers(ctx context.Context) ([]*model.User, error) {
	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
